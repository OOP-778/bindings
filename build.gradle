import dev.oop778.gradle.common.CommonPlugin
import dev.oop778.gradle.common.HierarchyProjectName
import dev.oop778.gradle.common.enums.MavenCentralReleaseManagement

plugins {
    id 'java-library'
    id "com.ryandens.javaagent-test" version "0.4.2"
    id "io.github.reyerizo.gradle.jcstress" version "0.8.15"
    id 'com.gradleup.shadow' version '8.3.0'
    id "me.champeau.jmh" version "0.7.1"
    id 'signing'
    id 'maven-publish'
}

apply plugin: CommonPlugin

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

jmh {
    profilers = ["async:output=flamegraph"]
    synchronizeIterations = false
}

java {
    withSourcesJar()
    withJavadocJar()
}

dependencies {
    testImplementation(fileTree("javaagent"))
    testJavaagent(fileTree("javaagent"))
    jmhImplementation(fileTree("javaagent"))

    // lombok
    compileOnly("org.projectlombok:lombok:1.18.20")
    annotationProcessor("org.projectlombok:lombok:1.18.20")

    //junit-jupiter-engine
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.2")
    testCompileOnly("org.projectlombok:lombok:1.18.20")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.20")

    // jsr305
    api("com.google.code.findbugs:jsr305:3.0.2")
}

deployer {
    if (System.getenv("CI") != null) {
        if (System.getenv("SIGN_KEY") != null) {
            setupSigning(System.getenv("SIGN_KEY"), System.getenv("SIGN_PASSWORD"))
        }

        def publication = createPublicationFrom(components.java, HierarchyProjectName.get(project), "dev.oop778", System.getenv("VERSION"))
        publishToMavenCentral(publication, System.getenv("MAVEN_USERNAME"), System.getenv("MAVEN_PASSWORD"), MavenCentralReleaseManagement.USER_MANAGED)
    }
}

